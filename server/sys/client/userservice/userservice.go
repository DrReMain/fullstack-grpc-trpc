// Code generated by goctl. DO NOT EDIT.
// Source: sys.proto

package userservice

import (
	"context"

	"sys/sysclient"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	LoginReq      = sysclient.LoginReq
	LoginRes      = sysclient.LoginRes
	UserAddReq    = sysclient.UserAddReq
	UserAddRes    = sysclient.UserAddRes
	UserDeleteReq = sysclient.UserDeleteReq
	UserDeleteRes = sysclient.UserDeleteRes
	UserInfoReq   = sysclient.UserInfoReq
	UserInfoRes   = sysclient.UserInfoRes
	UserListReq   = sysclient.UserListReq
	UserListRes   = sysclient.UserListRes
	UserUpdateReq = sysclient.UserUpdateReq
	UserUpdateRes = sysclient.UserUpdateRes

	UserService interface {
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error)
		UserAdd(ctx context.Context, in *UserAddReq, opts ...grpc.CallOption) (*UserAddRes, error)
		UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoRes, error)
		UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListRes, error)
		UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*UserUpdateRes, error)
		UserDelete(ctx context.Context, in *UserDeleteReq, opts ...grpc.CallOption) (*UserDeleteRes, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

func (m *defaultUserService) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error) {
	client := sysclient.NewUserServiceClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserService) UserAdd(ctx context.Context, in *UserAddReq, opts ...grpc.CallOption) (*UserAddRes, error) {
	client := sysclient.NewUserServiceClient(m.cli.Conn())
	return client.UserAdd(ctx, in, opts...)
}

func (m *defaultUserService) UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoRes, error) {
	client := sysclient.NewUserServiceClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}

func (m *defaultUserService) UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListRes, error) {
	client := sysclient.NewUserServiceClient(m.cli.Conn())
	return client.UserList(ctx, in, opts...)
}

func (m *defaultUserService) UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*UserUpdateRes, error) {
	client := sysclient.NewUserServiceClient(m.cli.Conn())
	return client.UserUpdate(ctx, in, opts...)
}

func (m *defaultUserService) UserDelete(ctx context.Context, in *UserDeleteReq, opts ...grpc.CallOption) (*UserDeleteRes, error) {
	client := sysclient.NewUserServiceClient(m.cli.Conn())
	return client.UserDelete(ctx, in, opts...)
}
